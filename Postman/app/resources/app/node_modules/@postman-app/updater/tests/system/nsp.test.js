var fs = require('fs'),
    chalk = require('chalk'),
    _ = require('lodash'),
    path = require('path'),
    chai = require('chai'),
    expect = chai.expect;

const loadJSON = function (file) {
    return JSON.parse(fs.readFileSync(path.join(__dirname, file)).toString());
};

describe('nsp for updater package', function () {
    it('must exist', function (done) {
        fs.stat('../../.nsprc', done);
    });

    it('nsp violations should be 0', function () {
        var nsp = require('nsp'),
            pkg = require('../../package.json'),
            nsprc = loadJSON('../../.nsprc'),
            res;
        nsp.check(
            {
                offline: false,
                package: {
                    name: pkg.name,
                    dependencies: _.omit(pkg.dependencies, _.keys(nsprc.exclusions))
                }
            }, (err, result) => {
                // if processing nsp had an error, simply print that and exit
                if (err) {
                    console.log(chalk.red('There was an error processing NSP!\n' + (err.message || err) + '\n\n' +
                  'Since NSP server failure is not a blocker for tests, tests are not marked as failure!'));
                    res = 0;
                }

                // in case an nsp violation is found, we raise an error
                else if (result.length) {
                    console.log(chalk.red(nsp.formatters.default(err, result)));
                    res = 1;
                }
                else {
                    res = 0;
                }
                expect(res).to.eql(0);
            }
        );
    });

    it('must not have any exceptions', function () {
        let nsprc = loadJSON('../../.nsprc');

        expect(nsprc.exceptions).to.eql([]);
    });

    it('must exclude only known set of packages', function () {
        let nsprc = loadJSON('../../.nsprc');

        expect(nsprc.exclusions).to.be.eql({});
    });
});
